package telegram

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"strconv"
	"strings"
)

// handleEventDelete ...
func (h *Handler) handleEventDelete(ctx context.Context, query *tgbotapi.CallbackQuery) error {
	defer func() {
		if r := recover(); r != nil {
			h.bot.Send(tgbotapi.NewCallbackWithAlert(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"))
		}
	}()

	chatID := query.Message.Chat.ID

	if !h.isAdmin(query.From.ID) {
		h.sendError(chatID, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
		return nil
	}

	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		callback := tgbotapi.NewCallbackWithAlert(query.ID, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞")
		h.bot.Send(callback)
	}

	eventID, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		callback := tgbotapi.NewCallbackWithAlert(query.ID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è")
		h.bot.Send(callback)
		return fmt.Errorf("failed to parse event ID: %w", err)
	}

	// —É–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
	if err := h.eventUC.DeleteEvent(ctx, eventID); err != nil {
		callback := tgbotapi.NewCallbackWithAlert(query.ID, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
		h.bot.Send(callback)
		return err
	}
	h.sendCallback(query.ID, EmOk, "–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")

	// —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–±—ã—Ç–∏–µ–º
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, query.Message.MessageID)
	h.bot.Send(deleteMsg)

	return nil
}
