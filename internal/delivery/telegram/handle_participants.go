package telegram

import (
	"context"
	"fmt"
	"log/slog"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/binaryty/evbot/internal/util"
)

// handleParticipants ...
func (h *Handler) handleParticipants(ctx context.Context, query *tgbotapi.CallbackQuery) error {
	chatID := query.Message.Chat.ID

	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		h.sendError(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è")
		return fmt.Errorf("invalid callback format: %s", query.Data)
	}

	eventID, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		h.sendError(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
		return fmt.Errorf("failed to parse event ID: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	participants, err := h.registrationUC.GetParticipants(ctx, eventID)
	if err != nil {
		h.sendError(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
		return fmt.Errorf("failed to get list of participants: %w", err)
	}

	if len(participants) == 0 {
		callback := tgbotapi.NewCallbackWithAlert(query.ID, "–ù–∞ —Å–æ–±—ã—Ç–∏–µ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üôÅ")
		h.bot.Send(callback)
		return nil
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
	event, err := h.eventUC.GetEventByID(ctx, eventID)
	var eventTitle string
	if err == nil && event != nil {
		eventTitle = event.Title
	} else {
		eventTitle = "–°–æ–±—ã—Ç–∏–µ"
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10)
	var callbackText strings.Builder
	callbackText.WriteString(fmt.Sprintf("–£—á–∞—Å—Ç–Ω–∏–∫–∏ '%s':\n\n", eventTitle))

	maxParticipants := 10
	for i, p := range participants {
		if i >= maxParticipants {
			callbackText.WriteString(fmt.Sprintf("\n... –∏ –µ—â–µ %d —á–µ–ª–æ–≤–µ–∫", len(participants)-maxParticipants))
			break
		}

		name := p.FirstName
		if name == "" && p.UserName != "" {
			name = "@" + p.UserName
		} else if p.UserName != "" {
			name = fmt.Sprintf("%s (@%s)", name, p.UserName)
		}

		callbackText.WriteString(fmt.Sprintf("%d. %s\n", i+1, name))
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–±—ç–∫-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	callback := tgbotapi.NewCallbackWithAlert(query.ID, callbackText.String())
	_, err = h.bot.Request(callback)
	if err != nil {
		h.logger.Error("failed to send participants callback",
			slog.String("error", err.Error()))
	}

	// –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
	if len(participants) > maxParticipants {
		// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è Markdown
		var fullList strings.Builder
		fullList.WriteString(fmt.Sprintf("üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è \"%s\":*\n\n", util.EscapeMarkdownV2(eventTitle)))

		for i, p := range participants {
			// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
			firstName := util.EscapeMarkdownV2(p.FirstName)
			userName := util.EscapeMarkdownV2(p.UserName)

			var name string
			if firstName != "" && userName != "" {
				name = fmt.Sprintf("%s \\(@%s\\)", firstName, userName)
			} else if firstName != "" {
				name = firstName
			} else if userName != "" {
				name = fmt.Sprintf("@%s", userName)
			} else {
				name = "–£—á–∞—Å—Ç–Ω–∏–∫"
			}

			fullList.WriteString(fmt.Sprintf("%d\\. %s\n", i+1, name))

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
			if fullList.Len() > 3000 {
				fullList.WriteString("\n‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å–æ–∫—Ä–∞—â–µ–Ω –∏–∑\\-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram")
				break
			}
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
		msg := tgbotapi.NewMessage(chatID, fullList.String())
		msg.ParseMode = tgbotapi.ModeMarkdownV2
		msg.ReplyToMessageID = query.Message.MessageID

		if _, err = h.bot.Send(msg); err != nil {
			h.logger.Error("failed to send full participants list",
				slog.String("error", err.Error()))
			return err
		}
	}

	return nil
}
