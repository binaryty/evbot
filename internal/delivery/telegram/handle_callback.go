package telegram

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strconv"
	"strings"

	domain "github.com/binaryty/evbot/internal/domain/entities"
	"github.com/binaryty/evbot/internal/util"
)

func (h *Handler) handleCallback(ctx context.Context, query *tgbotapi.CallbackQuery) error {
	// —É–±—Ä–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∫–Ω–æ–ø–∫–∏
	defer func() {
		callback := tgbotapi.NewCallback(query.ID, "")
		if _, err := h.bot.Request(callback); err != nil {
			log.Printf("failed to send callback: %v", err)
		}
	}()

	// –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback
	data := query.Data
	parts := strings.Split(data, ":")
	if len(parts) == 0 {
		return nil
	}

	switch parts[0] {
	case "register":
		return h.handleRegistration(ctx, query)
	case "participants":
		return h.handleParticipants(ctx, query)
	case "calendar":
		return h.handleCalendarCallback(ctx, query)
	}

	return nil
}

func (h *Handler) handleRegistration(ctx context.Context, query *tgbotapi.CallbackQuery) error {
	eventID, _ := strconv.ParseInt(strings.Split(query.Data, ":")[1], 10, 64)
	user := domain.User{
		ID:        query.From.ID,
		FirstName: query.From.FirstName,
		UserName:  query.From.UserName,
	}

	isRegistered, err := h.registrationUC.ToggleRegistration(ctx, eventID, &user)
	if err != nil {
		h.sendError(query.Message.Chat.ID, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
		return fmt.Errorf("failed to register: %w", err)
	}

	newText := "üé´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
	if isRegistered {
		newText = "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
	}

	editMarkup := tgbotapi.NewEditMessageReplyMarkup(
		query.Message.Chat.ID,
		query.Message.MessageID,
		tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(newText, fmt.Sprintf("register:%d", eventID)),
				tgbotapi.NewInlineKeyboardButtonData("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
					fmt.Sprintf("participants:%d", eventID)),
			),
		),
	)

	_, err = h.bot.Send(editMarkup)
	return err
}

func (h *Handler) handleParticipants(ctx context.Context, query *tgbotapi.CallbackQuery) error {
	chatID := query.Message.Chat.ID

	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		h.sendError(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è")
		return fmt.Errorf("invalid callback format: %s", query.Data)
	}

	eventID, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		h.sendError(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
		return fmt.Errorf("failed to parse event ID: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	participants, err := h.registrationUC.GetParticipants(ctx, eventID)
	if err != nil {
		h.sendError(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
		return fmt.Errorf("failed to get list of participants: %w", err)
	}

	if len(participants) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–ù–∞ —Å–æ–±—ã—Ç–∏–µ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üôÅ")
		_, err := h.bot.Send(msg)
		return err
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	var list strings.Builder
	list.WriteString("üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è:*\n\n")

	for _, p := range participants {
		// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
		firstName := util.EscapeMarkdownV2(p.FirstName)
		userName := util.EscapeMarkdownV2(p.UserName)

		list.WriteString(fmt.Sprintf("‚Ä¢ %s \\(@%s\\)\n", firstName, userName))

		// –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
		if list.Len() > 3000 {
			list.WriteString("\n‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å–æ–∫—Ä–∞—â–µ–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram")
			break
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
	msg := tgbotapi.NewMessage(chatID, list.String())
	msg.ParseMode = tgbotapi.ModeMarkdownV2
	msg.ReplyToMessageID = query.Message.MessageID

	if _, err = h.bot.Send(msg); err != nil {
		log.Printf("Failed to send participants list: %v", err)
		return err
	}

	return nil
}
