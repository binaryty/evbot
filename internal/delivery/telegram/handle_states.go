package telegram

import (
	"context"
	"errors"
	"fmt"
	"log"
	"log/slog"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	domain "github.com/binaryty/evbot/internal/domain/entities"
	"github.com/binaryty/evbot/internal/util"
)

// handleTitleStep ...
func (h *Handler) handleTitleStep(
	ctx context.Context,
	userID int64,
	chatID int64,
	text string,
	state domain.EventState,
) error {
	if len(text) > 100 {
		h.sendError(chatID, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")
		return nil
	}

	state.TempEvent.Title = text
	state.Step = domain.StepDescription

	if err := h.stateRepo.SaveState(ctx, userID, state); err != nil {
		return fmt.Errorf("failed to save state: %w", err)
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
	if state.MessageID > 0 {
		edit := tgbotapi.NewEditMessageText(chatID, state.MessageID, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
		_, err := h.bot.Send(edit)
		if err != nil {
			h.logger.Error("failed to update message for description step",
				slog.String("error", err.Error()))
			// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
			h.bot.Send(msg)
		}
	} else {
		// –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ ID, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
		h.bot.Send(msg)
	}

	return nil
}

// handleDescriptionStep ...
func (h *Handler) handleDescriptionStep(
	ctx context.Context,
	userID int64,
	chatID int64,
	text string,
	state domain.EventState,
) error {
	h.logger.Debug("handleDescriptionStep",
		slog.Int64("userID", userID),
		slog.Int64("chatID", chatID),
		slog.String("text", text))

	if len(text) > 500 {
		h.sendError(chatID, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)")
		return nil
	}

	state.TempEvent.Description = text
	state.Step = domain.StepDate

	h.logger.Debug("saving state after description",
		slog.Int64("userID", userID),
		slog.String("step", state.Step))

	if err := h.stateRepo.SaveState(ctx, userID, state); err != nil {
		h.logger.Error("failed to save state in handleDescriptionStep",
			slog.String("error", err.Error()),
			slog.Int64("userID", userID))
		h.sendError(chatID, MsgSaveError)
		return fmt.Errorf("failed to save state: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
	checkState, checkErr := h.stateRepo.GetState(ctx, userID)
	if checkErr != nil {
		h.logger.Error("state verification failed after saving description",
			slog.String("error", checkErr.Error()),
			slog.Int64("userID", userID))
	} else {
		h.logger.Debug("state verified after saving description",
			slog.Int64("userID", userID),
			slog.String("step", checkState.Step))
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
	calendar := domain.NewCalendar()
	calendarMarkup := generateCalendar(calendar.CurrentDate, calendar.CurrentDate, userID)

	// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
	if state.MessageID > 0 {
		edit := tgbotapi.NewEditMessageText(chatID, state.MessageID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è:")
		edit.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
			InlineKeyboard: calendarMarkup.InlineKeyboard,
		}
		_, err := h.bot.Send(edit)
		if err != nil {
			h.logger.Error("failed to update message with calendar",
				slog.String("error", err.Error()))
			// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
			msgID, err := h.sendDateCalendarForUser(chatID, userID)
			if err == nil {
				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
				state.MessageID = msgID
				_ = h.stateRepo.SaveState(ctx, userID, state)
			}
		}
		return nil
	} else {
		// –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ ID, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
		msgID, err := h.sendDateCalendarForUser(chatID, userID)
		if err == nil {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
			state.MessageID = msgID
			_ = h.stateRepo.SaveState(ctx, userID, state)
		}
		return err
	}
}

// sendDateCalendarForUser ...
func (h *Handler) sendDateCalendarForUser(chatID int64, userID int64) (int, error) {
	calendar := domain.NewCalendar()
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è:")
	msg.ReplyMarkup = generateCalendar(calendar.CurrentDate, calendar.CurrentDate, userID)
	sentMsg, err := h.bot.Send(msg)
	if err != nil {
		return 0, err
	}

	return sentMsg.MessageID, nil
}

// handleTimeStep ...
func (h *Handler) handleTimeStep(ctx context.Context, userID int64, chatID int64, messageID int) error {
	h.logger.Debug("handleTimeStep - START",
		slog.Int64("userID", userID),
		slog.Int64("chatID", chatID),
		slog.Int("messageID", messageID))

	state, err := h.stateRepo.GetState(ctx, userID)
	if err != nil {
		h.logger.Error("failed to get state in handleTimeStep:",
			slog.String("error", err.Error()),
			slog.Int64("userID", userID),
			slog.Int64("chatID", chatID))
		h.sendError(chatID, MsgSessionExpired)
		return fmt.Errorf("failed to get state: %w", err)
	}

	h.logger.Debug("handleTimeStep - state found",
		slog.Int64("userID", userID),
		slog.String("step", state.Step),
		slog.Any("tempEvent", state.TempEvent))

	tp := domain.TimePicker{
		SelectedTime: state.TempEvent.Date,
		Step:         domain.StepHours,
	}

	// –ï—Å–ª–∏ messageID = 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	// –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if messageID == 0 && state.MessageID > 0 {
		messageID = state.MessageID
	}

	if messageID == 0 {
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:")
		msg.ReplyMarkup = GenerateTimePicker(&tp, userID)
		sentMsg, err := h.bot.Send(msg)
		if err != nil {
			h.logger.Error("failed to send time picker message",
				slog.String("error", err.Error()))
			return fmt.Errorf("failed to send time picker: %w", err)
		}
		h.logger.Debug("time picker message sent", slog.Any("message", sentMsg))

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		state.MessageID = sentMsg.MessageID
	} else {
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		edit := tgbotapi.NewEditMessageText(chatID, messageID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:")
		edit.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
			InlineKeyboard: GenerateTimePicker(&tp, userID).InlineKeyboard,
		}
		_, err = h.bot.Send(edit)
		if err != nil {
			h.logger.Error("failed to update message with time picker",
				slog.String("error", err.Error()))
			return fmt.Errorf("failed to update message: %w", err)
		}
		h.logger.Debug("calendar message updated to time picker",
			slog.Int("messageID", messageID))

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
		state.MessageID = messageID
	}

	state.TimePicker = tp

	err = h.stateRepo.SaveState(ctx, userID, *state)
	if err != nil {
		h.logger.Error("failed to save state with time picker",
			slog.String("error", err.Error()),
			slog.Int64("userID", userID))
		return fmt.Errorf("failed to save state: %w", err)
	}

	return nil
}

// handleFinishEventCreation ...
func (h *Handler) handleFinishEventCreation(
	ctx context.Context,
	userID int64,
	chatID int64,
	state *domain.EventState,
) error {
	var err error

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
	if state.TempEvent.Title == "" || state.TempEvent.Date.IsZero() || state.TempEvent.Date.Hour() == 0 {
		h.sendError(chatID, "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
		return errors.New("incomplete event data")
	}

	// —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
	event := domain.Event{
		UserID:      userID,
		Title:       state.TempEvent.Title,
		Description: state.TempEvent.Description,
		Date:        state.TempEvent.Date,
		CreatedAt:   time.Now().UTC(),
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	event.ID, err = h.eventUC.CreateEvent(ctx, userID, event)
	if err != nil {
		if errors.Is(err, domain.ErrAdminOnly) {
			h.sendError(chatID, "üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è")
		} else {
			h.sendError(chatID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
		}
		return fmt.Errorf("failed to create event: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	msgText := fmt.Sprintf(
		"üéâ *–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ\\!*\n\n"+
			"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* %s\n"+
			"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n"+
			"‚è∞ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* %s",
		util.EscapeMarkdownV2(event.Title),
		util.EscapeMarkdownV2(event.Description),
		event.Date.Format("02\\.01\\.2006 15\\:04"),
	)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	isAdmin := h.isAdmin(userID)
	markup := createEventButtons(event.ID, false, isAdmin)

	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ParseMode = tgbotapi.ModeMarkdownV2
	msg.ReplyMarkup = markup

	if _, err := h.bot.Send(msg); err != nil {
		return fmt.Errorf("failed to send confirmation: %w", err)
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	if err := h.stateRepo.DeleteState(ctx, userID); err != nil {
		log.Printf("Failed to clear user state: %v", err)
	}

	return nil
}
