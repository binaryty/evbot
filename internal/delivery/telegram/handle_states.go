package telegram

import (
	"context"
	"errors"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strings"
	"time"

	domain "github.com/binaryty/evbot/internal/domain/entities"
	"github.com/binaryty/evbot/internal/util"
)

func (h *Handler) handleTitleStep(ctx context.Context, userID int64, chatID int64, text string, state domain.EventState) error {
	if strings.TrimSpace(text) == "" {
		h.sendError(chatID, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
		return nil
	}
	if len(text) > 100 {
		h.sendError(chatID, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")
		return nil
	}

	state.TempEvent.Title = text
	state.Step = domain.StepDescription

	// TODO: –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
	if err := h.stateRepo.SaveState(ctx, userID, state); err != nil {
		return fmt.Errorf("failed to save state: %w", err)
	}

	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
	h.bot.Send(msg)

	return nil
}

func (h *Handler) handleDescriptionStep(ctx context.Context, userID int64, chatID int64, text string, state domain.EventState) error {
	if len(text) > 500 {
		h.sendError(chatID, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)")
		return nil
	}

	state.TempEvent.Description = text
	state.Step = domain.StepDate

	//TODO: –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
	if err := h.stateRepo.SaveState(ctx, userID, state); err != nil {
		return fmt.Errorf("failed to save state: %w", err)
	}

	return h.sendDateCalendar(chatID)
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
func (h *Handler) sendDateCalendar(chatID int64) error {
	calendar := domain.NewCalendar()
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è:")
	msg.ReplyMarkup = generateCalendar(calendar)
	_, err := h.bot.Send(msg)
	return err
}

func (h *Handler) handleDateState(ctx context.Context, userID int64, chatID int64, text string, state *domain.EventState) error {
	date, err := time.Parse("02.01.2006 15:04", text)
	if err != nil {
		h.sendError(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")
		return nil
	}

	if date.Before(time.Now().Add(-5 * time.Minute)) {
		h.sendError(chatID, "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º")
		return nil
	}

	state.TempEvent.Date = date
	state.Step = domain.StepCompleted

	if err := h.eventUC.CreateEvent(ctx, userID, state.TempEvent); err != nil {
		h.sendError(chatID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
		return fmt.Errorf("failed to create event: %w", err)
	}

	msg := tgbotapi.NewMessage(chatID, "‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
	h.bot.Send(msg)

	return nil
}

func (h *Handler) handleFinishEventCreation(ctx context.Context, userID int64, chatID int64) error {
	state, err := h.stateRepo.GetState(ctx, userID)
	if err != nil {
		h.sendError(chatID, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
		return fmt.Errorf("get state error: %w", err)
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
	if state.TempEvent.Title == "" || state.TempEvent.Date.IsZero() {
		h.sendError(chatID, "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
		return errors.New("incomplete event data")
	}

	// —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
	event := domain.Event{
		UserID:      userID,
		Title:       state.TempEvent.Title,
		Description: state.TempEvent.Description,
		Date:        state.TempEvent.Date,
		CreatedAt:   time.Now().UTC(),
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	if err := h.eventUC.CreateEvent(ctx, userID, event); err != nil {
		h.sendError(chatID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
		return fmt.Errorf("failed to create event: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	msgText := fmt.Sprintf(
		"üéâ *–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ\\!*\n\n"+
			"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* %s\n"+
			"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n"+
			"‚è∞ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* %s",
		util.EscapeMarkdownV2(event.Title),
		util.EscapeMarkdownV2(event.Description),
		event.Date.Format("02\\.01\\.2006 15\\:04"),
	)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	markup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
				fmt.Sprintf("edit_event:%d", event.ID),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
				fmt.Sprintf("participants:%d", event.ID),
			),
		),
	)

	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ParseMode = tgbotapi.ModeMarkdownV2
	msg.ReplyMarkup = markup

	if _, err := h.bot.Send(msg); err != nil {
		return fmt.Errorf("failed to send confirmation: %w", err)
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	if err := h.stateRepo.DeleteState(ctx, userID); err != nil {
		log.Printf("Failed to clear user state: %v", err)
	}

	return nil
}
